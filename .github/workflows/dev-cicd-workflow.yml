name: Dev CI/CD Workflow

on:
  workflow_dispatch:

  push:
    branches: [ "develop" ]

jobs:
  continuous-integration:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:9.3.0
        env:
          MYSQL_DATABASE: climbx
          MYSQL_USER: dev_user
          MYSQL_PASSWORD: dev_password
          MYSQL_ROOT_PASSWORD: root_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        env:
          DB_URL: jdbc:mysql://localhost:3306/climbx?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
          DB_USER: dev_user
          DB_PASSWORD: dev_password
        run: ./gradlew build -x test --info

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building and pushing Docker image..."
          docker build -t ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker tag ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:latest
          
          docker push ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:$IMAGE_TAG
          
          echo "✅ Image successfully pushed to ECR"

  continuous-deployment:
    name: Deploy Dev EC2
    runs-on: ubuntu-latest
    needs: continuous-integration
    if: success()

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_BE_CORE_EC2_HOST }}
          username: ${{ secrets.DEV_BE_CORE_EC2_USERNAME }}
          key: ${{ secrets.DEV_BE_CORE_EC2_SSH_KEY_PEM }}
          port: 22
          script: |
            # 1. AWS ECR에 로그인
            # EC2에 연결된 IAM 역할 덕분에 Access Key 없이 로그인이 가능
            aws ecr get-login-password \
              --region ${{ vars.AWS_REGION }} \
            | docker login \
              --username AWS \
              --password-stdin ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}
            
            # 2. 최신 Docker 이미지 PULL
            docker pull ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:latest
            
            # 3. 기존에 실행 중인 컨테이너가 있다면 중지 및 제거
            if [ $(docker ps -q --filter "name=${{ vars.DEV_BE_CORE_CONTAINER_NAME }}") ]; then
              echo "Stopping and removing existing container..."
              docker stop ${{ vars.DEV_BE_CORE_CONTAINER_NAME }}
              docker rm ${{ vars.DEV_BE_CORE_CONTAINER_NAME }}
              echo "Container stopped and removed."
            fi
            
            # 4. 새로운 컨테이너 실행
            echo "Starting new container..."
            docker run -d -p ${{ vars.SPRING_CONTAINER_PORT }}:${{ vars.SPRING_CONTAINER_PORT }} \
              --name '${{ vars.DEV_BE_CORE_CONTAINER_NAME }}' \
              --restart always \
              -e DB_URL='${{ secrets.DEV_DB_URL }}' \
              -e DB_USER='${{ secrets.DEV_DB_USER }}' \
              -e DB_PASSWORD='${{ secrets.DEV_DB_PASSWORD }}' \
              ${{ secrets.DEV_BE_CORE_ECR_REPOSITORY_URI }}:latest
            
            echo "New container started successfully."

            # 5. 사용되지 않는 오래된 Docker 이미지 정리 (디스크 공간 확보)
            docker image prune -af
            
            echo "🚀 Deployment to EC2 completed successfully!"
