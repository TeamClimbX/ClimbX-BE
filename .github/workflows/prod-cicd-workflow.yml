name: Prod CI/CD Workflow

on:
  workflow_dispatch:

  push:
    branches: [ "main" ]

jobs:
  continuous-integration:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building and pushing Docker image..."
          docker build -t ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker tag ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:$IMAGE_TAG ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:latest
          
          docker push ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:$IMAGE_TAG
          
          echo "‚úÖ Image successfully pushed to ECR"

  migrate-database:
    name: Flyway Database Migration
    runs-on: ubuntu-latest
    needs: continuous-integration

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Run Flyway Migrate
        run: |
          docker run --rm \
          -v ${{ github.workspace }}/src/main/resources/db/migration:/flyway/sql \
          --network host \
          flyway/flyway:latest \
          -url='${{ secrets.DB_PROD_URL}}' \
          -user='${{ secrets.DB_PROD_USER}}' \
          -password='${{ secrets.DB_PROD_PASSWORD }}' \
          migrate

  continuous-deployment:
    name: Deploy Prod EC2
    runs-on: ubuntu-latest
    needs: migrate-database
    if: success()

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_PROD_BE_CORE_EC2_HOST }}
          username: ${{ secrets.AWS_PROD_BE_CORE_EC2_USERNAME }}
          key: ${{ secrets.AWS_PROD_BE_CORE_EC2_SSH_KEY_PEM }}
          port: 22
          script: |
            # 1. AWS ECRÏóê Î°úÍ∑∏Ïù∏
            # EC2Ïóê Ïó∞Í≤∞Îêú IAM Ïó≠Ìï† ÎçïÎ∂ÑÏóê Access Key ÏóÜÏù¥ Î°úÍ∑∏Ïù∏Ïù¥ Í∞ÄÎä•
            aws ecr get-login-password \
              --region ${{ vars.AWS_REGION }} \
            | docker login \
              --username AWS \
              --password-stdin ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}

            # 2. ÏµúÏã† Docker Ïù¥ÎØ∏ÏßÄ PULL
            docker pull ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:latest

            # 3. Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Í∞ïÏ†ú Ï†úÍ±∞ (Ïã§Ìñâ Ï§ëÏù¥Í±∞ÎÇò Ï§ëÏßÄÎêú ÏÉÅÌÉú Í¥ÄÍ≥ÑÏóÜÏù¥)
            echo "Removing existing container if exists..."
            docker rm -f ${{ vars.SPRING_CONTAINER_NAME }} 2>/dev/null || echo "No existing container to remove."

            # 4. ÏÉàÎ°úÏö¥ Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
            echo "Starting new container..."
            docker run -d -p ${{ vars.SPRING_CONTAINER_PORT }}:${{ vars.SPRING_CONTAINER_PORT }} \
              --name '${{ vars.SPRING_CONTAINER_NAME }}' \
              -e SPRING_PROFILES_ACTIVE='prod' \
              -e DB_URL='${{ secrets.DB_PROD_URL }}' \
              -e DB_USER='${{ secrets.DB_PROD_USER }}' \
              -e DB_PASSWORD='${{ secrets.DB_PROD_PASSWORD }}' \
              -e KAKAO_NATIVE_APP_KEY='${{ secrets.KAKAO_NATIVE_APP_KEY }}' \
              -e GOOGLE_ANDROID_APP_KEY='${{ secrets.GOOGLE_ANDROID_APP_KEY }}' \
              -e GOOGLE_IOS_APP_KEY='${{ secrets.GOOGLE_IOS_APP_KEY }}' \
              -e APPLE_ANDROID_APP_KEY='${{ secrets.APPLE_ANDROID_APP_KEY }}' \
              -e APPLE_IOS_APP_KEY='${{ secrets.APPLE_IOS_APP_KEY }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET_PROD }}' \
              -e AWS_S3_VIDEOS_SOURCE_BUCKET_NAME='${{ secrets.AWS_PROD_S3_VIDEOS_SOURCE_BUCKET_NAME }}' \
              -e AWS_S3_IMAGES_BUCKET_NAME='${{ secrets.AWS_PROD_S3_IMAGES_BUCKET_NAME }}' \
              -e AWS_S3_PRESIGNED_URL_EXPIRATION='${{ secrets.AWS_PROD_S3_PRESIGNED_URL_EXPIRATION }}' \
              -e AWS_CLOUDFRONT_DOMAIN='${{ secrets.AWS_PROD_CLOUDFRONT_DOMAIN }}' \
              -e AWS_S3_REGION='${{ vars.AWS_S3_REGION }}' \
              -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              ${{ secrets.AWS_PROD_BE_CORE_ECR_REPOSITORY_URI }}:latest

            echo "New container started successfully."

            # 5. ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÎäî Ïò§ÎûòÎêú Docker Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨ (ÎîîÏä§ÌÅ¨ Í≥µÍ∞Ñ ÌôïÎ≥¥)
            docker image prune -af

            echo "üöÄ Deployment to EC2 completed successfully!"