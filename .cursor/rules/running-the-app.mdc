---
description: "How to run the application and tests."
---
# Running the Application and Tests

## 개발 환경 설정

### 필수 요구사항
- Java 21
- Gradle 8.x
- Docker 및 Docker Compose
- IDE (IntelliJ IDEA 권장)

### 환경 변수 설정
개발 환경에서 필수로 설정해야 하는 환경 변수들:
```bash
# JWT 설정
JWT_SECRET=...

# 데이터베이스 설정
DB_USER=...
DB_PASSWORD=...

# AWS S3 설정 
AWS_ACCESS_KEY_ID=...
AWS_SECRET_ACCESS_KEY=...

# OAuth2 설정
KAKAO_NATIVE_APP_KEY=...
GOOGLE_ANDROID_APP_KEY=...
GOOGLE_IOS_APP_KEY=...
APPLE_ANDROID_APP_KEY=...
APPLE_IOS_APP_KEY=...
```

> **참고**: 위에 명시되지 않은 다른 환경 변수들은 기본값을 사용합니다.
> AWS_S3_BUCKET_NAME, AWS_REGION 등은 애플리케이션 설정에서 기본값이 적용됩니다.

## 데이터베이스 설정

### 1. Docker를 이용한 MySQL 실행 (권장)
```bash
# MySQL 컨테이너 시작
cd docker/dev/mysql
docker-compose up -d

# 컨테이너 상태 확인
docker-compose ps

# 로그 확인
docker-compose logs -f mysql

# 컨테이너 중지
docker-compose down
```

### 2. 로컬 MySQL 사용시
- MySQL 8.0 이상
- 데이터베이스 생성: `CREATE DATABASE climbx_dev;`
- 사용자 생성 및 권한 부여:
  ```sql
  CREATE USER 'climbx'@'localhost' IDENTIFIED BY 'password';
  GRANT ALL PRIVILEGES ON climbx_dev.* TO 'climbx'@'localhost';
  FLUSH PRIVILEGES;
  ```
- `application-db-dev.yml`에서 연결 정보 수정

### 3. 데이터베이스 스키마 확인
```bash
# 애플리케이션 실행 후 스키마 자동 생성됨
# 초기 데이터는 src/main/resources/db/init/data.sql 실행
```

## 애플리케이션 실행

### 1. IDE에서 실행 (권장)
1. IntelliJ IDEA에서 프로젝트 열기
2. `ClimbXApplication.java` 파일 열기
3. main 메서드 좌측 실행 버튼 클릭
4. 또는 `Shift + F10` (Windows) / `Ctrl + R` (Mac)

### 2. Gradle을 이용한 실행
```bash
# 개발 환경에서 실행
./gradlew bootRun

# 특정 프로파일로 실행
./gradlew bootRun --args='--spring.profiles.active=dev'

# 디버그 모드로 실행
./gradlew bootRun --debug-jvm
```

### 3. JAR 파일 빌드 및 실행
```bash
# JAR 파일 빌드
./gradlew build

# 빌드된 JAR 실행
java -jar build/libs/climbx-0.0.1-SNAPSHOT.jar

# 프로파일 지정해서 실행
java -jar build/libs/climbx-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev
```

### 실행 확인
- 애플리케이션 시작 후 `http://localhost:8080` 접속
- Swagger UI: `http://localhost:8080/swagger-ui.html`
- API 문서: `http://localhost:8080/v3/api-docs`

### 주요 API 엔드포인트 확인
```bash
# 헬스체크
curl http://localhost:8080/actuator/health

# 체육관 목록 조회
curl http://localhost:8080/api/gyms/search

# 랭킹 조회
curl http://localhost:8080/api/ranking/users?criteria=rating

# 제출 목록 조회
curl http://localhost:8080/api/submissions
```

## 테스트 실행

### 1. 전체 테스트 실행
```bash
# 모든 테스트 실행
./gradlew test

# 테스트 결과 상세 출력
./gradlew test --info

# 병렬 테스트 실행
./gradlew test --parallel
```

### 2. 특정 테스트 클래스 실행
```bash
# 특정 테스트 클래스 실행
./gradlew test --tests UserServiceTest

# 특정 패키지의 모든 테스트 실행
./gradlew test --tests "com.climbx.climbx.user.*"

# 특정 테스트 메서드 실행
./gradlew test --tests UserServiceTest.testCreateUser
```

### 3. 테스트 종류별 실행
```bash
# 단위 테스트만 실행 (Service 레이어)
./gradlew test --tests "*ServiceTest"

# 통합 테스트만 실행 (Controller 레이어)
./gradlew test --tests "*ControllerTest"

# 보안 테스트만 실행
./gradlew test --tests "*SecurityTest"

# 랭킹 관련 테스트만 실행
./gradlew test --tests "*RankingTest"

# 제출 관련 테스트만 실행
./gradlew test --tests "*SubmissionTest"
```

### 4. IDE에서 테스트 실행
- 테스트 클래스나 메서드 좌측 실행 버튼 클릭
- `Ctrl + Shift + F10` (Windows) / `Ctrl + Shift + R` (Mac)
- 전체 테스트: 프로젝트 우클릭 > "Run All Tests"

## 코드 품질 검사

### 1. Checkstyle 실행
```bash
# 코드 스타일 검사
./gradlew checkstyleMain checkstyleTest

# 검사 결과 확인
open build/reports/checkstyle/main.html
```

### 2. 코드 커버리지 확인 (JaCoCo)
```bash
# 테스트 커버리지 생성
./gradlew jacocoTestReport

# 커버리지 리포트 확인
open build/reports/jacoco/test/html/index.html

# 커버리지 검증
./gradlew jacocoTestCoverageVerification
```
### 3. 빌드 검증
```bash
# 전체 빌드 (테스트 + 코드 품질 검사 포함)
./gradlew build

# 빌드 캐시 정리
./gradlew clean build

# 의존성 업데이트 확인
./gradlew dependencyUpdates
```

## 개발 도구 및 유틸리티

### 1. 애플리케이션 재시작
```bash
# Spring Boot DevTools 사용 (의존성 추가시)
# 클래스 파일 변경시 자동 재시작

# 수동 재시작이 필요한 경우
# Ctrl + C로 중지 후 다시 실행
```

### 2. 로그 확인
```bash
# 애플리케이션 로그 실시간 확인
tail -f logs/application.log

# 특정 레벨 로그 필터링
grep "ERROR" logs/application.log
grep "DEBUG" logs/application.log
```

### 3. 프로파일별 설정
- `dev`: 개발 환경 (MySQL, 로그 레벨 DEBUG, AWS S3 연동)
- `test`: 테스트 환경 (H2, 로그 레벨 INFO)
- `prod`: 운영 환경 (추후 작성 필요)

각 프로파일별 설정 파일:
- `application-dev.yml`: 개발 환경 설정
- `application-db-dev.yml`: 개발 DB 설정  
- `application-auth-dev.yml`: OAuth2 설정
- `application-aws-dev.yml`: AWS S3 설정

### 4. 데이터베이스 마이그레이션
```bash
# 개발 환경: 자동 스키마 업데이트
# application-dev.yml의 ddl-auto: update

# 운영 환경: 수동 마이그레이션 스크립트 작성 필요
# Flyway 또는 Liquibase 도구 사용 권장
```

## 새로운 기능 추가 시 체크리스트

### 1. 개발 전 확인사항
- [ ] 새 기능에 필요한 의존성 추가 (`build.gradle`)
- [ ] 환경 변수 설정 (`application-*.yml`)
- [ ] 데이터베이스 스키마 변경사항 확인

### 2. 개발 중 확인사항  
- [ ] 코드 스타일 가이드 준수 (`./gradlew checkstyleMain`)
- [ ] 단위 테스트 작성 및 실행
- [ ] API 문서화 (Swagger) 작성

### 3. 개발 완료 후 확인사항
- [ ] 전체 테스트 통과 (`./gradlew test`)
- [ ] 코드 커버리지 확인 (`./gradlew jacocoTestReport`)
- [ ] 통합 테스트 실행
- [ ] Swagger UI에서 API 동작 확인

## 디버깅 및 트러블슈팅

### 1. 애플리케이션 로그 레벨 조정
```yaml
# application-dev.yml에서 로그 레벨 변경
logging:
  level:
    com.climbx: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
```

### 2. 데이터베이스 쿼리 디버깅
```yaml
# JPA 쿼리 로깅 활성화
spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
```

### 3. 프로파일별 문제 해결
- **개발 환경**: MySQL 연결 문제 → Docker 컨테이너 상태 확인
- **테스트 환경**: H2 메모리 DB → 테스트 간 데이터 초기화 확인
