---
description: "ClimbX 프로젝트의 실제 구현 코드를 기반으로 한 API 설계 원칙과 컨벤션"
---

# API Design Guide

본 가이드는 ClimbX 프로젝트의 실제 구현된 코드를 기반으로 한 API 설계 원칙입니다.

## RESTful API 설계 원칙

### 1. URL 설계 규칙

#### 기본 원칙
- 복수형 명사 사용
- kebab-case 사용 지양, camelCase도 지양
- 경로 파라미터는 단수형

```bash
# Good (실제 구현된 패턴)
GET /api/users
GET /api/users/{nickname}
PUT /api/users/{nickname}
GET /api/users/{nickname}/top-problems
GET /api/users/{nickname}/streak
GET /api/users/{nickname}/history
GET /api/gyms/{gymId}
GET /api/gyms

# Bad
GET /api/getUsers
GET /api/user
GET /api/user-profiles
POST /api/createUser
```

#### 계층 구조 표현 (실제 패턴)
```bash
# 사용자의 상위 문제들
GET /api/users/{nickname}/top-problems

# 사용자의 스트릭 정보
GET /api/users/{nickname}/streak

# 사용자의 일일 기록
GET /api/users/{nickname}/history

# 위치 기반 체육관 조회
GET /api/gyms/nearby?latitude={lat}&longitude={lng}

# 랭킹 조회
GET /api/ranking/users?criteria={criteria}

# 제출 관련
GET /api/submissions
POST /api/submissions
GET /api/submissions/{videoId}
PATCH /api/submissions/{videoId}
GET /api/submissions/{videoId}/appeal
POST /api/submissions/{videoId}/appeal

# 비디오 관련
GET /api/videos/{nickname}
POST /api/videos/upload-url

# 문제 관련
GET /api/problems/spots
GET /api/problems/spots/{spotId}
```

### 2. HTTP 메서드 사용법

#### CRUD 매핑 (실제 구현)
```bash
# Create (생성)
POST /api/submissions            # 제출 생성
POST /api/videos/upload-url      # 비디오 업로드 URL 생성
POST /api/submissions/{videoId}/appeal  # 어필 생성

# Read (조회)
GET /api/users                   # 목록 조회 (검색 포함)
GET /api/users/{nickname}        # 단일 조회
GET /api/gyms/{gymId}           # 체육관 단일 조회
GET /api/ranking/users          # 랭킹 조회
GET /api/submissions            # 제출 목록 조회
GET /api/videos/{nickname}      # 사용자 비디오 목록

# Update (수정)
PUT /api/users/{nickname}        # 프로필 전체 수정
PATCH /api/submissions/{videoId} # 제출 취소

# 특수 조회 패턴
GET /api/users?search={keyword}   # 검색 쿼리
GET /api/gyms/search?keyword={keyword}   # 키워드 검색
GET /api/gyms/nearby?latitude={lat}&longitude={lng}&keyword={keyword}  # 위치+키워드 검색
GET /api/ranking/users?criteria={criteria}&page={page}&size={size}     # 페이징 랭킹 조회
```

## Controller 구현 패턴

### 1. 기본 Controller 구조

```java
@RestController
@RequestMapping("/api/{domain}")
@Validated
@RequiredArgsConstructor
public class DomainController {
    
    private final DomainService domainService;
    
    // 목록 조회 (검색 포함)
    @GetMapping("")
    public List<DomainResponseDto> getDomains(
        @RequestParam(required = false) String search
    ) {
        return domainService.getDomains(search);
    }
    
    // 단일 조회
    @GetMapping("/{id}")
    public DomainResponseDto getDomainById(
        @PathVariable @NotNull @Min(1L) Long id
    ) {
        return domainService.getDomainById(id);
    }
    
    // 수정
    @PutMapping("/{id}")
    public DomainResponseDto updateDomain(
        @AuthenticationPrincipal Long userId,
        @PathVariable @NotBlank String nickname,
        @RequestBody @Valid DomainUpdateRequestDto request
    ) {
        return domainService.updateDomain(userId, nickname, request);
    }
}
```

### 2. 응답 처리 패턴

#### ApiResponseAdvice 활용
```java
// Controller에서는 직접 DTO 반환
@GetMapping("/{nickname}")
public UserProfileResponseDto getUserByNickname(
    @PathVariable @NotBlank String nickname
) {
    return userService.getUserByNickname(nickname);
}

// ApiResponseAdvice가 자동으로 ApiResponse로 래핑
// 최종 응답:
{
  "httpStatus": 200,
  "statusMessage": "SUCCESS",
  "timeStamp": "2024-01-01T00:00:00Z",
  "responseTimeMs": 45,
  "path": "/api/users/climber123",
  "data": {
    "nickname": "climber123",
    "statusMessage": "등반 중!",
    "profileImageUrl": null,
    "ranking": 42,
    "rating": 1500,
    "categoryRatings": {},
    "currentStreak": 5,
    "longestStreak": 15,
    "solvedProblemsCount": 120,
    "rivalCount": 8
  }
}
```

#### 특별한 응답이 필요한 경우
```java
@PostMapping("/oauth2/refresh")
public ApiResponse<LoginResponseDto> refreshAccessToken(
    @RequestBody @Valid RefreshRequestDto request
) {
    LoginResponseDto response = authService.refreshAccessToken(request.refreshToken());
    return ApiResponse.success(response, HttpStatus.CREATED);
}

@PostMapping("/signout")
public ApiResponse<Void> signOut(@RequestBody @Valid RefreshRequestDto request) {
    return ApiResponse.success(null, HttpStatus.NO_CONTENT);
}
```

### 3. 검증 어노테이션 패턴

#### Path Variable 검증
```java
@GetMapping("/{gymId}")
public GymInfoResponseDto getGymById(
    @PathVariable @NotNull @Min(1L) Long gymId
) {
    return gymService.getGymById(gymId);
}

@GetMapping("/{nickname}")
public UserProfileResponseDto getUserByNickname(
    @PathVariable @NotBlank String nickname
) {
    return userService.getUserByNickname(nickname);
}
```

#### Request Parameter 검증
```java
@GetMapping("/{nickname}/top-problems")
public List<ProblemResponseDto> getUserTopProblems(
    @PathVariable @NotBlank String nickname,
    @RequestParam(required = false, defaultValue = "20") @Min(1) @Max(20) Integer limit
) {
    return userService.getUserTopProblems(nickname, limit);
}

@GetMapping(params = {"latitude", "longitude"})
public List<GymInfoResponseDto> getGymListByDistance(
    @RequestParam @DecimalMin(value = "-90.0") @DecimalMax(value = "90.0") Double latitude,
    @RequestParam @DecimalMin(value = "-180.0") @DecimalMax(value = "180.0", inclusive = false) Double longitude,
    @RequestParam(required = false) String keyword
) {
    return gymService.getGymListByDistance(latitude, longitude, keyword);
}
```

#### 날짜 파라미터 처리
```java
@GetMapping("/{nickname}/streak")
public List<DailyHistoryResponseDto> getUserStreak(
    @PathVariable @NotBlank String nickname,
    @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
    @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to
) {
    return userService.getUserStreak(nickname, from, to);
}
```

## ApiResponse 구조

### 1. 표준 응답 형식

#### 성공 응답
```json
{
  "httpStatus": 200,
  "statusMessage": "SUCCESS",
  "timeStamp": "2024-01-01T12:00:00.123456Z",
  "responseTimeMs": 45,
  "path": "/api/users/climber123",
  "data": {
    "nickname": "climber123",
    "statusMessage": "열심히 등반 중!",
    "profileImageUrl": null,
    "ranking": 42,
    "rating": 1500,
    "categoryRatings": {},
    "currentStreak": 5,
    "longestStreak": 15,
    "solvedProblemsCount": 120,
    "rivalCount": 8
  }
}
```

#### 에러 응답
```json
{
  "httpStatus": 404,
  "statusMessage": "사용자를 찾을 수 없습니다.",
  "timeStamp": "2024-01-01T12:00:00.123456Z",
  "responseTimeMs": 12,
  "path": "/api/users/nonexistent",
  "data": null
}
```

### 2. ApiResponse 생성 메서드

#### 성공 응답 생성
```java
// 기본 성공 응답 (200 OK)
ApiResponse.success(data)

// HTTP 상태 코드 지정
ApiResponse.success(data, HttpStatus.CREATED)

// 커스텀 메시지
ApiResponse.success(data, "리다이렉트 중입니다.")
```

#### 에러 응답 생성
```java
// 에러 응답
ApiResponse.error(HttpStatus.NOT_FOUND, "사용자를 찾을 수 없습니다.")
ApiResponse.error(HttpStatus.BAD_REQUEST, "잘못된 요청입니다.")
```

## DTO 설계 패턴

### 1. Record 기반 DTO

#### Request DTO
```java
@Builder
public record UserProfileModifyRequestDto(
    @NotBlank @Size(min = 2, max = 20) String newNickname,
    @Size(max = 100) String newStatusMessage,
    @URL String newProfileImageUrl
) {
}
```

#### Response DTO
```java
@Builder
public record UserProfileResponseDto(
    String nickname,
    String statusMessage,
    String profileImageUrl, // null 허용
    Long ranking,
    Long rating,
    Map<String, Long> categoryRatings,
    Long currentStreak,
    Long longestStreak,
    Long solvedProblemsCount,
    Long rivalCount
) {
    
    public static UserProfileResponseDto from(
        UserAccountEntity account,
        UserStatEntity stat,
        Long ranking,
        Map<String, Long> categoryRatings
    ) {
        return UserProfileResponseDto.builder()
            .nickname(account.nickname())
            .statusMessage(account.statusMessage())
            .profileImageUrl(account.profileImageUrl())
            .ranking(ranking)
            .rating(stat.rating())
            .categoryRatings(categoryRatings)
            .currentStreak(stat.currentStreak())
            .longestStreak(stat.longestStreak())
            .solvedProblemsCount(stat.solvedProblemsCount())
            .rivalCount(stat.rivalCount())
            .build();
    }
}
```

### 2. DTO 검증 패턴

#### 상세한 검증 어노테이션
```java
@Builder
public record GymInfoResponseDto(
    @NotNull Long gymId,
    @NotBlank @Size(min = 1, max = 30) String name,
    @DecimalMin(value = "-90.0") @DecimalMax(value = "90.0") Double latitude,
    @DecimalMin(value = "-180.0") @DecimalMax(value = "180.0", inclusive = false) Double longitude,
    @Size(max = 100) String address,
    @Size(min = 11, max = 13) @Pattern(regexp = "^\\d{2,3}-\\d{3,4}-\\d{4}$") String phoneNumber,
    @Size(max = 200) String description,
    @Size(max = 255) String map2DUrl
) {
}
```

## 에러 처리

### 1. ErrorCode 정의 (실제 구현)

```java
public enum ErrorCode {
    // 4xx : Client Errors
    INVALID_REQUEST(HttpStatus.BAD_REQUEST, "잘못된 요청입니다."),
    VALIDATION_FAILED(HttpStatus.BAD_REQUEST, "유효성 검사에 실패했습니다."),
    UNAUTHORIZED(HttpStatus.UNAUTHORIZED, "인증이 필요합니다."),
    FORBIDDEN(HttpStatus.FORBIDDEN, "접근 권한이 없습니다."),
    USER_NOT_FOUND(HttpStatus.NOT_FOUND, "사용자를 찾을 수 없습니다."),
    USER_STAT_NOT_FOUND(HttpStatus.NOT_FOUND, "사용자 통계 정보를 찾을 수 없습니다."),
    DUPLICATED_NICKNAME(HttpStatus.CONFLICT, "이미 사용 중인 닉네임입니다."),
    GYM_NOT_FOUND(HttpStatus.NOT_FOUND, "체육관을 찾을 수 없습니다."),
    NICKNAME_MISMATCH(HttpStatus.BAD_REQUEST, "닉네임이 일치하지 않습니다."),

    // 5xx : Server Errors
    INTERNAL_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, "서버 내부 오류가 발생했습니다."),
    DATABASE_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, "데이터베이스 오류가 발생했습니다."),
    EXTERNAL_SERVICE_ERROR(HttpStatus.BAD_GATEWAY, "외부 서비스 호출에 실패했습니다."),
    TIMEOUT(HttpStatus.GATEWAY_TIMEOUT, "요청 시간이 초과되었습니다."),
    SERVICE_UNAVAILABLE(HttpStatus.SERVICE_UNAVAILABLE, "서비스를 사용할 수 없습니다.");
}
```

### 2. GlobalExceptionHandler 패턴 (실제 구현)

```java
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<ApiResponse<Void>> handleBusinessException(BusinessException e) {
        log.error("BusinessException occurred: {}, detail: {}", 
                 e.getMessage(), e.context().toString(), e);
        
        ApiResponse<Void> response = ApiResponse.error(
            e.errorCode().status(),
            e.errorCode().message()
        );
        return ResponseEntity.status(e.errorCode().status()).body(response);
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Void>> handleMethodArgumentNotValidException(
        MethodArgumentNotValidException e) {
        
        String errorMessage = e.getBindingResult().getFieldErrors().stream()
            .map(error -> error.getField() + ": " + error.getDefaultMessage())
            .reduce((msg1, msg2) -> msg1 + ", " + msg2)
            .orElse("Validation failed");
            
        ApiResponse<Void> response = ApiResponse.error(
            ErrorCode.VALIDATION_FAILED.status(),
            errorMessage
        );
        return ResponseEntity.badRequest().body(response);
    }
}
```

## 인증 및 권한

### 1. JWT 인증 패턴 (실제 구현)

```java
@GetMapping("/me")
public UserOauth2InfoResponseDto getCurrentUserInfo(
    @AuthenticationPrincipal Long userId
) {
    return authService.getCurrentUserInfo(userId);
}

@PutMapping("/{nickname}")
public UserProfileResponseDto modifyUserProfile(
    @AuthenticationPrincipal Long userId,
    @PathVariable @NotBlank String nickname,
    @RequestBody @Valid UserProfileModifyRequestDto request
) {
    return userService.modifyUserProfile(userId, nickname, request);
}
```

### 2. 인증 응답 DTO (실제 구현)

```java
@Builder
public record LoginResponseDto(
    @NotBlank String tokenType,           // "Bearer"
    @NotBlank String accessToken,         // JWT token
    @Nullable String refreshToken,        // 현재 null
    @NotNull @Min(0) long expiresIn       // 만료 시간 (초)
) {
}

@Builder
public record UserOauth2InfoResponseDto(
    @NotNull @Min(0) Long id,
    @NotBlank String nickname,
    @NotBlank String provider,
    @NotNull Instant issuedAt,
    @NotNull Instant expiresAt
) {
}
```

## 검색 및 필터링 패턴

### 1. 조건부 매핑 (실제 구현)

```java
// 위치 정보가 없는 경우
@GetMapping(params = {"!latitude", "!longitude"})
public List<GymInfoResponseDto> getGymList(
    @RequestParam(required = false) String keyword
) {
    return gymService.getGymList(keyword);
}

// 위치 정보가 있는 경우
@GetMapping(params = {"latitude", "longitude"})
public List<GymInfoResponseDto> getGymListByDistance(
    @RequestParam @DecimalMin("-90.0") @DecimalMax("90.0") Double latitude,
    @RequestParam @DecimalMin("-180.0") @DecimalMax("180.0") Double longitude,
    @RequestParam(required = false) String keyword
) {
    return gymService.getGymListByDistance(latitude, longitude, keyword);
}
```

### 2. 검색 쿼리 패턴 (실제 구현)

```bash
# 사용자 검색
GET /api/users?search=climber

# 체육관 키워드 검색
GET /api/gyms?keyword=클라임엑스

# 위치 기반 체육관 검색
GET /api/gyms?latitude=37.5665&longitude=126.9780&keyword=클라임엑스

# 날짜 범위 조회
GET /api/users/{nickname}/streak?from=2024-01-01&to=2024-01-31

# 기준별 히스토리 조회
GET /api/users/{nickname}/history?criteria=RATING&from=2024-01-01&to=2024-01-31
```

## 성능 최적화

### 1. 응답 시간 추적 (실제 구현)

```java
// TimeContext를 통한 자동 응답 시간 측정
// ApiResponse에 responseTimeMs 자동 포함
{
  "responseTimeMs": 45,
  "path": "/api/users/climber123"
}
```

### 2. 페이징 처리 (Service 레이어, 실제 구현)

```java
@Transactional(readOnly = true)
public List<ProblemResponseDto> getUserTopProblems(String nickname, Integer limit) {
    UserAccountEntity userAccount = findUserByNickname(nickname);
    Sort sort = Sort.by("problemEntity.problemRating").descending();
    Pageable pageable = PageRequest.of(0, limit, sort);

    List<ProblemEntity> problemEntities = submissionRepository.getUserSubmissionProblems(
        userAccount.userId(), pageable);

    return problemEntities.stream()
        .map(ProblemResponseDto::from)
        .toList();
}
```

이러한 패턴들을 따르면 ClimbX 프로젝트의 기존 코드와 일관성 있는 API를 구축할 수 있습니다.


이러한 API 설계 가이드를 따르면 일관성 있고 사용하기 쉬운 REST API를 구축할 수 있습니다.
